buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "io.github.gradle-nexus:publish-plugin:1.0.0"
    }
}

version "0.2.2"
sourceCompatibility = '1.8'
targetCompatibility = '1.8'
group "com.morpheusdata.grails.plugins"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: 'java-library'
apply plugin:"org.grails.grails-plugin"

ext {
    isBuildSnapshot = version.endsWith('-SNAPSHOT')
    isReleaseVersion = !isBuildSnapshot
}


repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    api group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    api "org.grails.plugins:hibernate5"
    implementation "org.grails.plugins:cache"
    api 'org.elasticsearch.client:elasticsearch-rest-client:7.9.0'
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"
}

if (isReleaseVersion) {
    apply plugin: "io.github.gradle-nexus.publish-plugin"
    nexusPublishing {
        repositories {
            sonatype {
                if(project.hasProperty('mavenUser')) {
                    username = mavenUser
                    password = mavenPassword
                }   
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId 'karman-grails'
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'grails-elasticsearch-rest'
                    description 'Grails ElasticSearch Low Level Rest Client'
                    url 'https://github.com/gomorpheus/grails-elasticsearch-rest'
                    scm {
                        url 'https://github.com/gomorpheus/grails-elasticsearch-rest'
                        connection 'scm:https://bertramdev@github.com/gomorpheus/grails-elasticsearch-rest.git'
                        developerConnection 'scm:git://github.com/gomorpheus/grails-elasticsearch-rest.git'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'davydotcom'
                            name 'David Estes'
                            email 'davydotcom@gmail.com'
                        }
                    }
                }
            }
            from components.java
        }
    }
    repositories {
        maven {
            if( !isReleaseVersion ) {
                url = "http://nexus.bertramlabs.com/content/repositories/snapshots"
                if(project.hasProperty('labsNexusUser')) {
                    credentials {
                        username = labsNexusUser
                        password = labsNexusPassword
                    }
                }
            }
        }
    }
}

afterEvaluate {
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.maven
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

//do not generate extra load on Nexus with new staging repository if signing fails
tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
    shouldRunAfter(tasks.withType(Sign))
}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}
// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false
